/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * ConnexAI Tech Test API
 * OpenAPI spec version: 0.0.1
 */
import { useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import axios from 'axios';
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from 'axios';

import { faker } from '@faker-js/faker';

import { HttpResponse, http } from 'msw';

export type GetWeather200DataItem = {
  location?: string;
  temp?: number;
};

export type GetWeather200 = {
  data: GetWeather200DataItem[];
};

export type GetCurrentServerTime200 = {
  current_time: string;
};

export type GetInteractions200DataItem = {
  id?: number;
  agent_id?: number;
  customer_id?: number;
  length_seconds?: number;
  created_at?: string;
};

export type GetInteractions200 = {
  data: GetInteractions200DataItem[];
};

export type GetCustomers200DataItem = {
  id?: number;
  name?: string;
};

export type GetCustomers200 = {
  data: GetCustomers200DataItem[];
};

export type GetAgents200DataItem = {
  id?: number;
  name?: string;
};

export type GetAgents200 = {
  data: GetAgents200DataItem[];
};

/**
 * Get weather for locations.
 */
export const getWeather = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetWeather200>> => {
  return axios.get(`/weather`, options);
};

export const getGetWeatherQueryKey = () => {
  return [`/weather`] as const;
};

export const getReports = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetReports200>> => {
  return axios.get(`/report`, options);
};

export const getGetReportsQueryKey = () => {
  return [`/report`] as const;
};

export type GetReports200 = {
  data: GetReports200DataItem[];
};

export type GetReports200DataItem = {
  id?: number;
  agent_id?: number;
  customer_id?: number;
  length_seconds?: number;
  created_at?: string;
  agent_name?: string;
  customer_name?: string;
};

export const getGetWeatherQueryOptions = <
  TData = Awaited<ReturnType<typeof getWeather>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetWeatherQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getWeather>>> = ({
    signal,
  }) => getWeather({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWeather>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export const getGetReportsQueryOptions = <
  TData = Awaited<ReturnType<typeof getReports>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetReportsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getReports>>> = ({
    signal,
  }) => getReports({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getReports>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetReportsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReports>>
>;
export type GetReportsQueryError = AxiosError<unknown>;

export function useGetReports<
  TData = Awaited<ReturnType<typeof getReports>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReports>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReportsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export type GetWeatherQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWeather>>
>;
export type GetWeatherQueryError = AxiosError<unknown>;

export function useGetWeather<
  TData = Awaited<ReturnType<typeof getWeather>>,
  TError = AxiosError<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWeather>>,
          TError,
          Awaited<ReturnType<typeof getWeather>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetWeather<
  TData = Awaited<ReturnType<typeof getWeather>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWeather>>,
          TError,
          Awaited<ReturnType<typeof getWeather>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetWeather<
  TData = Awaited<ReturnType<typeof getWeather>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetWeather<
  TData = Awaited<ReturnType<typeof getWeather>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getWeather>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetWeatherQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get current server time.
 */
export const getCurrentServerTime = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetCurrentServerTime200>> => {
  return axios.get(`/time`, options);
};

export const getGetCurrentServerTimeQueryKey = () => {
  return [`/time`] as const;
};

export const getGetCurrentServerTimeQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentServerTime>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getCurrentServerTime>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentServerTimeQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurrentServerTime>>
  > = ({ signal }) => getCurrentServerTime({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentServerTime>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentServerTimeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentServerTime>>
>;
export type GetCurrentServerTimeQueryError = AxiosError<unknown>;

export function useGetCurrentServerTime<
  TData = Awaited<ReturnType<typeof getCurrentServerTime>>,
  TError = AxiosError<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentServerTime>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentServerTime>>,
          TError,
          Awaited<ReturnType<typeof getCurrentServerTime>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentServerTime<
  TData = Awaited<ReturnType<typeof getCurrentServerTime>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentServerTime>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentServerTime>>,
          TError,
          Awaited<ReturnType<typeof getCurrentServerTime>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentServerTime<
  TData = Awaited<ReturnType<typeof getCurrentServerTime>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentServerTime>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCurrentServerTime<
  TData = Awaited<ReturnType<typeof getCurrentServerTime>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getCurrentServerTime>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCurrentServerTimeQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all interaction records.
 */
export const getInteractions = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetInteractions200>> => {
  return axios.get(`/interaction`, options);
};

export const getGetInteractionsQueryKey = () => {
  return [`/interaction`] as const;
};

export const getGetInteractionsQueryOptions = <
  TData = Awaited<ReturnType<typeof getInteractions>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getInteractions>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetInteractionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getInteractions>>> = ({
    signal,
  }) => getInteractions({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInteractions>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetInteractionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInteractions>>
>;
export type GetInteractionsQueryError = AxiosError<unknown>;

export function useGetInteractions<
  TData = Awaited<ReturnType<typeof getInteractions>>,
  TError = AxiosError<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInteractions>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInteractions>>,
          TError,
          Awaited<ReturnType<typeof getInteractions>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetInteractions<
  TData = Awaited<ReturnType<typeof getInteractions>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInteractions>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInteractions>>,
          TError,
          Awaited<ReturnType<typeof getInteractions>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetInteractions<
  TData = Awaited<ReturnType<typeof getInteractions>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInteractions>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetInteractions<
  TData = Awaited<ReturnType<typeof getInteractions>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getInteractions>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetInteractionsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all customer records.
 */
export const getCustomers = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetCustomers200>> => {
  return axios.get(`/customer`, options);
};

export const getGetCustomersQueryKey = () => {
  return [`/customer`] as const;
};

export const getGetCustomersQueryOptions = <
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCustomersQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCustomers>>> = ({
    signal,
  }) => getCustomers({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCustomers>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCustomersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCustomers>>
>;
export type GetCustomersQueryError = AxiosError<unknown>;

export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = AxiosError<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomers>>,
          TError,
          Awaited<ReturnType<typeof getCustomers>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCustomers>>,
          TError,
          Awaited<ReturnType<typeof getCustomers>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCustomers<
  TData = Awaited<ReturnType<typeof getCustomers>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCustomers>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCustomersQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Get all agent records.
 */
export const getAgents = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<GetAgents200>> => {
  return axios.get(`/agent`, options);
};

export const getGetAgentsQueryKey = () => {
  return [`/agent`] as const;
};

export const getGetAgentsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAgents>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAgents>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAgentsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAgents>>> = ({
    signal,
  }) => getAgents({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAgents>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAgentsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAgents>>
>;
export type GetAgentsQueryError = AxiosError<unknown>;

export function useGetAgents<
  TData = Awaited<ReturnType<typeof getAgents>>,
  TError = AxiosError<unknown>
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgents>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAgents>>,
          TError,
          Awaited<ReturnType<typeof getAgents>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAgents<
  TData = Awaited<ReturnType<typeof getAgents>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgents>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAgents>>,
          TError,
          Awaited<ReturnType<typeof getAgents>>
        >,
        'initialData'
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAgents<
  TData = Awaited<ReturnType<typeof getAgents>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgents>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetAgents<
  TData = Awaited<ReturnType<typeof getAgents>>,
  TError = AxiosError<unknown>
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAgents>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAgentsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetWeatherResponseMock = (
  overrideResponse: Partial<GetWeather200> = {}
): GetWeather200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    location: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
    temp: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
  })),
  ...overrideResponse,
});

export const getGetCurrentServerTimeResponseMock = (
  overrideResponse: Partial<GetCurrentServerTime200> = {}
): GetCurrentServerTime200 => ({
  current_time: faker.string.alpha(20),
  ...overrideResponse,
});

export const getGetInteractionsResponseMock = (
  overrideResponse: Partial<GetInteractions200> = {}
): GetInteractions200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    agent_id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    customer_id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    length_seconds: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    created_at: faker.helpers.arrayElement([
      faker.date.past().toISOString().split('T')[0],
      undefined,
    ]),
  })),
  ...overrideResponse,
});

export const getGetCustomersResponseMock = (
  overrideResponse: Partial<GetCustomers200> = {}
): GetCustomers200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  })),
  ...overrideResponse,
});

export const getGetAgentsResponseMock = (
  overrideResponse: Partial<GetAgents200> = {}
): GetAgents200 => ({
  data: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1
  ).map(() => ({
    id: faker.helpers.arrayElement([
      faker.number.int({ min: undefined, max: undefined }),
      undefined,
    ]),
    name: faker.helpers.arrayElement([faker.string.alpha(20), undefined]),
  })),
  ...overrideResponse,
});

export const getGetWeatherMockHandler = (
  overrideResponse?:
    | GetWeather200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetWeather200> | GetWeather200)
) => {
  return http.get('*:3333/weather', async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetWeatherResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getGetCurrentServerTimeMockHandler = (
  overrideResponse?:
    | GetCurrentServerTime200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetCurrentServerTime200> | GetCurrentServerTime200)
) => {
  return http.get('*:3333/time', async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCurrentServerTimeResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getGetInteractionsMockHandler = (
  overrideResponse?:
    | GetInteractions200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetInteractions200> | GetInteractions200)
) => {
  return http.get('*:3333/interaction', async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetInteractionsResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getGetCustomersMockHandler = (
  overrideResponse?:
    | GetCustomers200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetCustomers200> | GetCustomers200)
) => {
  return http.get('*:3333/customer', async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetCustomersResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};

export const getGetAgentsMockHandler = (
  overrideResponse?:
    | GetAgents200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0]
      ) => Promise<GetAgents200> | GetAgents200)
) => {
  return http.get('*:3333/agent', async (info) => {
    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === 'function'
            ? await overrideResponse(info)
            : overrideResponse
          : getGetAgentsResponseMock()
      ),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    );
  });
};
export const getConnexAITechTestAPIMock = () => [
  getGetWeatherMockHandler(),
  getGetCurrentServerTimeMockHandler(),
  getGetInteractionsMockHandler(),
  getGetCustomersMockHandler(),
  getGetAgentsMockHandler(),
];
